(define ctrue (lambda (x y) x))
(define cfalse (lambda (x y) y))
(define cnot 
    (lambda (f)
        (define inverted (lambda (x y) (f y x)))
        inverted))
(define cand 
    (lambda (f1 f2)
        (f1 (f2 ctrue cfalse) cfalse)))
(define cor
    (lambda (f1 f2)
        (f1 ctrue (f2 ctrue cfalse))))
(define simplify (lambda (f) (f #t #f)))
(cons ctrue
      (cons (simplify ctrue)
            (cons (simplify cfalse)
                  (cons (simplify (cnot ctrue))
                        (cons (cor ctrue cfalse)
                              (cand ctrue ctrue))))))

